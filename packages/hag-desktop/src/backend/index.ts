import { app, BrowserWindow, ipcMain } from "electron";
import { Client } from "hag-network-client";
import { ip, port } from "hag-network-client/dist/env";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let client: Client;

ipcMain.on("startClient", (event, data) => {
  if (!client) {
    client = new Client(ip, port, event.sender.userAgent, data.userName, data.password);
  }
  attachToClient(event.sender);
  console.log("client attached");
  if (client) resubscribeClient();
});

ipcMain.handle("IsClientActive", () => !!client);

[
  "GetMissionDetailsRequest",
  "query_war_catalogue_request",
].forEach(name => {
  ipcMain.handle(name, (_, data) =>
    client.sendPacketAsync(name, data));
});

ipcMain.on("join_war_request", async (_, data) => {
  const result = await client.sendPacketAsync("join_war_request", data);
  await unsubscribeClient();
  if (result.msg == 1) app.exit();
  console.log(result);
  app.exit(1);
});

async function subscribeClient() {
  await client.sendPacketAsync("query_war_catalogue_request");
  await client.sendPacketAsync("subscribewarmapview");
}

async function unsubscribeClient() {
  await client.sendPacketAsync("unsubscribewarmapview");
}

async function resubscribeClient() {
  await unsubscribeClient();
  await subscribeClient();
}

function attachToClient(webContents: Electron.WebContents) {
  client.once("loggedin", async () => {
    webContents.send("loggedin");
    subscribeClient();
  }).on("loginFailed", () => {
    webContents.mainFrame.executeJavaScript("alert('Login failed!');");
    // TODO Add try again logic
  }).on("query_war_catalogue_response", (data) => {
    webContents.send("warCatalogueFactions", data.warcataloguedata[0].warCatalogueFactions);
  }).on("message", async (typetext, data) => {
    if (typetext == "KeyValueChangeSet") webContents.send("KeyValueChangeSet", data);
  }).on("LoginQueueUpdate", (pos) => {
    webContents.send("LoginQueueUpdate", pos);
  }).on("closed", () => {
    console.log("Socket closed!");
  });
}

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

