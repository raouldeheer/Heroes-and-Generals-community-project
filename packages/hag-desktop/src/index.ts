import { app, BrowserWindow, ipcMain } from "electron";
import { DataStore } from "hag-network-client/dist/datastore";
import BufferCursor from "hag-network-client/dist/buffercursor";
import mylas from "mylas";
import { keyToClass } from "hag-network-client/dist/protolinking/classKeys";


// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });
  const userAgent = mainWindow.webContents.userAgent;

  ipcMain.on("get-setup-data", async (_, arg) => {
    console.log(arg);
    const dataStore = new DataStore;

    async function loadTemplate(name: string) {
      const tempFile = await mylas.buf.load(`./captures/${name}`);
      const element = new BufferCursor(tempFile);

      element.move(4);
      const typeLength = element.readUInt32LE() - 4;
      const typeText = element.slice(typeLength).toString("ascii");

      const DataBuf = element.slice();
      DataBuf.seek(0);

      let result;
      if (keyToClass.has(typeText)) {
        try {
          // Find class to parse packet with.
          const klas = keyToClass.get(typeText)!;
          result = klas.parse(DataBuf);
          if (typeof result == "object") {
            if (typeText == "KeyValueChangeSet")
              dataStore.SaveData(result);
          }
        } catch (error) {
          console.error(error);
        }
      } else {
        console.log(typeText);
      }
    }

    await loadTemplate("battlefield");
    await loadTemplate("supplyline");
    await loadTemplate("accesspoint");
    console.log("Send setup data");
    mainWindow.webContents.send("datastore", dataStore.GetMap());
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

