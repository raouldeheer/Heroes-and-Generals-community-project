import { app, BrowserWindow, ipcMain } from "electron";
import { Client, DataStore } from "hag-network-client";
import { ip, port } from "hag-network-client/dist/env";
import { ResponseType } from "hag-network-client/dist/protolinking/classKeys";
import Long from "long";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

// ipcMain.handle("login", async (event, ...args) => {
//   event.sender.userAgent;
//   -// TODO make login.tsx work with this.
//   return {};
// });

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });
  const userAgent = mainWindow.webContents.userAgent;
  console.log(`userAgent: ${userAgent}`);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  {
    const colors = ["#f00", "#0f0", "#00f", "#000", "#fff", "#888"];
    const factions: string[] = [];
    const dataStore = new DataStore;
    const cl = new Client(ip, port);
    const startTime = Date.now();
    cl.once("loggedin", async () => {
      cl.sendPacket("subscribewarmapview");
      cl.sendPacket("query_war_catalogue_request");
    }).on("join_war_response", async (data: { msg: ResponseType, redirectSrv?: string; }) => {
      if (data.msg === ResponseType.ok) {
        if (data.redirectSrv) {
          console.log(`redirectSrv detected: ${data.redirectSrv}`);
        }
        cl.sendPacket("unsubscribewarmapview");
        setTimeout(() => {
          cl.sendPacket("subscribewarmapview");
          cl.sendPacket("query_war_catalogue_request");
        }, 1000);
      } else {
        console.error(`ERROR: ${data}`);
      }
    }).on("message", async (typetext, data) => {
      if (typetext == "KeyValueChangeSet") {
        if (data?.set) {
          for (const iterator of data.set) {
            if (iterator.key == "war") {
              const value = iterator.value;
              if (value.sequelwarid !== "0") {
                console.log(`${value.id} ended, switching to: ${value.sequelwarid}`);
                dataStore.ResetData("battlefieldstatus"); // TODO reset react.
                cl.sendPacket("join_war_request", {
                  warid: Long.fromString(value.sequelwarid),
                  factionid: Long.ZERO,
                  playedFirstBlood: 0,
                });
              }
            } else if (iterator.key == "battlefieldstatus") {
              const data = iterator.value;
              if (!factions.includes(data.factionid)) factions.push(data.factionid);
              data.color = colors[factions.indexOf(data.factionid)];
              mainWindow.webContents.send(`battlefield${data.battlefieldid}`, data);
              // console.log(`battlefield${data.battlefieldid}`);
              // console.log(data);
            } else if (iterator.key == "supplylinestatus") {
              const data = iterator.value;
              if (!factions.includes(data.factionid)) factions.push(data.factionid);
              data.color = colors[factions.indexOf(data.factionid)];
              mainWindow.webContents.send(`supplyline${data.supplylineid}`, data);
              // console.log(`supplyline${data.supplylineid}`);
              // console.log(data);
            }
          }
        }
      }
    }).on("closed", () => {
      console.log("Socket closed!");
      console.log(`After ${Date.now() - startTime}ms`);
      process.exit(1);
    });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

