import { MissionStatus, ResponseType } from "hagcp-network-client/dist/protolinking/classKeys";

export interface Battlefield {
    id: string;
    mapid: string;
    bftitle: string;
    sector: string;
    posx: number;
    posy: number;
    gamemap: string;
    rotation?: number;
}

export interface battlefieldstatus {
    id: string;
    warid: string;
    battlefieldid: string;
    factionid: string;
    color: string;
}

export interface battle {
    id: string;
    warid: string;
    mapEntityId: string;
    mapEntityTypeId: string;
    start: string;
    factioncount: number;
    excludedFactionId: string;
    position: string;
    activationTimeStamp: string;
}

export interface supplylinestatus {
    id: string;
    warid: string;
    factionid: string;
    supplylineid: string;
    color: string;
}

export interface supplyline {
    id: string;
    accesspoint1Id: string;
    accesspoint2Id: string;
    posx1: number;
    posy1: number;
    posx2: number;
    posy2: number;
}

export type battleBattlefieldPair = { battle: battle, battlefield: Battlefield; };

export interface war {
    id: string;
    name: string;
    begintime: string;
    endtime: string;
    web: string;
    friendlyfire: string;
    winningfactionid: string;
    pointsNeededForVictory: number;
    automissionnormal: number;
    automissionskirmish: number;
    automissionsupply: number;
    strategytimescale: number;
    daycycletimescale: number;
    disablestrategy: number;
    maxPlayerPerFaction: number;
    sequelwarid: string;
    mapid: string;
    cleanupStatus: number;
    fowGridSize: number;
    fowGridOriginX: number;
    fowGridOriginY: number;
    queueReinforcements: boolean;
    firstResourceFree: boolean;
    moraleMinValue: number;
    moraleMaxValue: number;
    moraleLostPerBattle: number;
    moraleGainedPerWin: number;
    moraleGainedPerMinute: number;
    moraleSurrenderLimit: number;
}

export interface GetMissionDetailsResponse {
    response: ResponseType;
    info?: MissionInfo;
    factions: MissionDetailsFaction[];
    assaultTeams: MissionDetailsAssaultTeam[];
    armyResources: MissionDetailsArmyResource[];
    accessPoints: MissionDetailsAccessPoint[];
    capturepointStatuses: MissionDetailsCapturepointStatus[];
    posX: number;
    posY: number;
}

export interface MissionInfo {
    missionId: string;
    battleId: string;
    missionpreset: string;
    mapEntityId: string;
    mapEntityTypeId: string;
    isAutogenerated: number;
    defenderFactionId: string;
    status: MissionStatus;
    hostingCenterId: string;
    activationTimeStamp: string;
    weatherTimeOfDay: number;
    weatherCondition: number;
}

export interface MissionDetailsFaction {
    factionId: string;
    players: MissionDetailsPlayer[];
}

export interface MissionDetailsPlayer {
    gamerTag: string;
}

export interface MissionDetailsAssaultTeam {
    factionId: string;
    commandNodeTemplateId: string;
    accessPointTemplateId: string;
    ownerPlayerId: string;
}

export interface MissionDetailsArmyResource {
    factionId: string;
    armyResourceCategoryId: string;
    accessPointTemplateId: string;
    count: number;
    spawnInAir: boolean;
}

export interface MissionDetailsAccessPoint {
    accessPointTemplateId: string;
    factionTemplateId: string;
}

export interface MissionDetailsCapturepointStatus {
    capturepointTemplateId: string;
    ownerFactionId: string;
}

export interface Armyresourcecategory {
    id: string;
    name: string;
    actionid: number;
    avgSize: number;
    categoryBitfieldIndex: number;
    speed: number;
    maxDedicatedResources: number;
    captureTransferMultiplierWar: number;
    captureTransferMultiplierStaged: number;
}

export interface CommandNodeWarInstance {
    id: string;
    commandNodeDefinitionId: string;
    parentCommandNodeInstanceId: string;
    factionId: string;
    mapEntityId: string;
    mapEntityTypeId: string;
    warId: string;
    morale: number;
    lastReset: string;
    isDeployed: number;
    hasGottenSoldierResourcesForFree: boolean;
    hasGottenVehicleResourcesForFree: boolean;
    maxMorale: number;
    moraleGainModifier: number;
}

export interface CommandNodeDefinition {
    id: string;
    name: string;
    abbreviation: string;
    ownerPlayerId: string;
    factionTemplateId: string;
    commandNodeTemplateId: string;
    rank: number;
    supplyResourceCategoryId?: string;
    generalCharacterId: string;
    statUpdateTimeStamp: string;
    suppliedOnCreation: boolean;
}

export interface Player {
    id: string;
    gamertag: string;
    invertmouse: number;
    invertmouseairplane: number;
    mousesensitivity: number;
    administrator: string;
    mousecontrolledcars: number;
    showcrosshair: number;
    showcrosshairVehicles: number;
    war: string;
    factionid: string;
    subscribedupto: string;
    goldBought: string;
    goldEarned: string;
    goldUsed: string;
    creditsBought: string;
    creditsEarned: string;
    creditsUsed: string;
    firstActionGameDate: string;
    numloginsFlash: number;
    numloginsMobile: number;
    language: string;
    warfundsBought: string;
    warfundsEarned: string;
    warfundsUsed: string;
    metricsUid?: string;
    yellowGriefPoints: number;
    redGriefPoints: number;
    latestRedGriefPointTimestamp: string;
    tier: number;
    lastLogin: string;
    tutorialsCompleted: number;
    goldBoughtSteam: string;
    skillLevel: number;
    invertmouseturret: number;
    totalScore: string;
    unlockBits: boolean[];
    level: number;
    achievementsBits: boolean[];
    isDeleted: boolean;
    currencyCode: string;
    currencyRegion: string;
}
